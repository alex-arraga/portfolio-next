generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int      @id @default(autoincrement())
  id_clerk           String   @unique
  username           String?
  name               String?
  lastname           String?
  has_google_account Boolean  @default(false)
  google_email       String?
  has_github_account Boolean  @default(false)
  github_email       String?
  created_at         DateTime @default(now())

  calcs_idUser  Calculator[] @relation("calcs_user_id")
  calcs_idClerk Calculator[] @relation("calcs_user_clerk")

  tasks_idUser  Task[] @relation("tasks_user_id")
  tasks_idClerk Task[] @relation("tasks_user_clerk")

  completed_tasks_idUser  TaskCompleted[] @relation("completed_tasks_user_id")
  completed_tasks_idClerk TaskCompleted[] @relation("completed_tasks_user_clerk")

  cars_idUser  Cars[] @relation("cars_user_id")
  cars_idClerk Cars[] @relation("cars_user_clerk")

  order_idUser  Order[] @relation("order_user_id")
  order_idClerk Order[] @relation("order_user_clerk")
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  created_at  DateTime @default(now())
  user_id     Int
  user_clerk  String
  user        User     @relation("tasks_user_id", fields: [user_id], references: [id])
  userClerk   User     @relation("tasks_user_clerk", fields: [user_clerk], references: [id_clerk])
}

model TaskCompleted {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  created_at  DateTime @default(now())
  user_id     Int
  user_clerk  String
  user        User     @relation("completed_tasks_user_id", fields: [user_id], references: [id])
  userClerk   User     @relation("completed_tasks_user_clerk", fields: [user_clerk], references: [id_clerk])
}

model Calculator {
  id         Int      @id @default(autoincrement())
  expression String
  result     String
  created_at DateTime @default(now())
  user_id    Int
  user_clerk String
  user       User     @relation("calcs_user_id", fields: [user_id], references: [id])
  userClerk  User     @relation("calcs_user_clerk", fields: [user_clerk], references: [id_clerk])
}

enum Pay_Method {
  none
  mercado_pago
  stripe
}

model Cars {
  id              Int      @id @default(autoincrement())
  city_mpg        Int
  class           String
  combination_mpg Int
  cylinders       Int
  displacement    Float
  drive           String
  fuel_type       String
  highway_mpg     Int
  make            String
  model           String
  transmission    String
  year            Int
  liked           Boolean
  rented          Boolean
  order_id        String   @unique
  user_id         Int
  user_clerk      String
  created_at      DateTime @default(now())
  order           Order?   @relation("order_cars", fields: [order_id], references: [order_id])
  user            User     @relation("cars_user_id", fields: [user_id], references: [id])
  userClerk       User     @relation("cars_user_clerk", fields: [user_clerk], references: [id_clerk])
}

model Order {
  id                  Int         @id @default(autoincrement())
  order_id            String      @unique
  pay_status          String      @default("pending")
  pay_status_detail   String?
  pay_method          Pay_Method?
  pay_resource        String?
  duration_rented     Int
  price               Int
  installments        Int?
  fee                 Int?
  net_received_amount Int?
  user_id             Int
  user_clerk          String
  cars                Cars?       @relation("order_cars")
  user                User        @relation("order_user_id", fields: [user_id], references: [id])
  userClerk           User        @relation("order_user_clerk", fields: [user_clerk], references: [id_clerk])
}
